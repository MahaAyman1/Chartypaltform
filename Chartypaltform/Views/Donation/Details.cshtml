@model Campaign
@using System.Security.Claims

@{
    ViewData["Title"] = "Details";
    ViewBag.ShowHeroSection = true;
}

<!-- Load the PayPal SDK with the correct client ID -->
<script src="https://www.paypal.com/sdk/js?client-id=@(ViewBag.PaypalClientId)&currency=USD" async defer></script>

<h1>@Model.CampaignName</h1>

<div class="mx-auto p-4 rounded border shadow" style="width: 420px;">
    <h2 class="text-center mb-5">Complete your order</h2>
    <div class="form-group mb-3">
        <label class="form-label">Total Amount ($)</label>
        <input class="form-control" type="number" id="totalAmount" step="0.01" />
    </div>
    <div id="notification-container"></div> <!-- Notification container for alerts -->
    <div id="paypal-button-container"></div> <!-- PayPal button container -->
</div>

<script>
    // Function to load PayPal buttons
    function loadPayPalButtons() {
        paypal.Buttons({
            style: {
                layout: 'vertical',
                color: 'blue',
                shape: 'rect',
                label: 'pay'
            },
            createOrder: async function (data, actions) {
                try {
                    const totalAmount = document.getElementById("totalAmount").value;
                    const campaignId = @Model.CampaignId; // Ensure this is set correctly in your model
                    const donorId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)'; // Ensure the user is authenticated

                    // Validate input
                    if (!totalAmount || parseFloat(totalAmount) <= 0) {
                        alert('Please enter a valid total amount.');
                        return;
                    }

                    // Prepare request to create the order
                    const response = await fetch("@Url.Action("CreateOrder", "Donation")", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ amount: totalAmount, campaignId: campaignId, donorId: donorId })
                    });

                    // Parse the response
                    const order = await response.json();
                    if (order.Error) throw new Error(order.Error);
                    return order.id; // Return the order ID
                } catch (error) {
                    console.error("Error creating order: ", error);
                    alert('Failed to create order. Please try again later.');
                }
            },
            onApprove: async function (data) {
                try {
                    const response = await fetch("@Url.Action("CompleteOrder", "Donation")", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ amount: document.getElementById("totalAmount").value, orderID: data.orderID, campaignId: @Model.CampaignId, donorId: '@User.FindFirstValue(ClaimTypes.NameIdentifier)' })
                    });

                    const details = await response.json();
                    const notificationContainer = document.getElementById("notification-container");

                    // Display success or failure message based on response
                    if (details === "success") {
                        notificationContainer.innerHTML = `
                                <div class='alert alert-success alert-dismissible fade show' role='alert'>
                                    <strong>The order was created successfully!</strong>
                                    <button type='button' class='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>
                                </div>`;
                    } else {
                        notificationContainer.innerHTML = `
                                <div class='alert alert-danger alert-dismissible fade show' role='alert'>
                                    <strong>Failed to complete the order!</strong>
                                    <button type='button' class='btn-close' data-bs-dismiss='alert' aria-label='Close'></button>
                                </div>`;
                    }
                } catch (error) {
                    console.error("Error completing order: ", error);
                    alert('An error occurred. Please try again later.');
                }
            },
            onError: function (err) {
                console.error(err);
                alert('An error occurred. Please try again later.');
            }
        }).render('#paypal-button-container'); // Render the PayPal buttons
    }

    // Load the PayPal buttons after the SDK script is loaded
    window.onload = function () {
        loadPayPalButtons();
    };
</script>
